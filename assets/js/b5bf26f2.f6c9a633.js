"use strict";(self.webpackChunkme=self.webpackChunkme||[]).push([[1963],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return u}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),m=p(n),u=a,h=m["".concat(l,".").concat(u)]||m[u]||d[u]||o;return n?r.createElement(h,i(i({ref:t},c),{},{components:n})):r.createElement(h,i({ref:t},c))}));function u(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var p=2;p<o;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},164:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return l},default:function(){return u},frontMatter:function(){return s},metadata:function(){return p},toc:function(){return d}});var r=n(7462),a=n(3366),o=(n(7294),n(3905)),i=["components"],s={title:"Trees",sidebar_position:11},l="Trees",p={unversionedId:"dsa/Trees-3V5farrGy",id:"dsa/Trees-3V5farrGy",title:"Trees",description:"Key Terms",source:"@site/docs/dsa/20220612-Trees-3V5farrGy.md",sourceDirName:"dsa",slug:"/dsa/Trees-3V5farrGy",permalink:"/docs/dsa/Trees-3V5farrGy",draft:!1,editUrl:"https://github.com/iamrahultanwar/me/tree/master/docs/dsa/20220612-Trees-3V5farrGy.md",tags:[],version:"current",sidebarPosition:11,frontMatter:{title:"Trees",sidebar_position:11},sidebar:"tutorialSidebar",previous:{title:"Graphs",permalink:"/docs/dsa/Graphs-Nv8-CVr9f"},next:{title:"Glossary",permalink:"/docs/dsa/Glossary-wL0qzzPif"}},c={},d=[{value:"Key Terms",id:"key-terms",level:3},{value:"References",id:"references",level:2}],m={toc:d};function u(e){var t=e.components,n=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"trees"},"Trees"),(0,o.kt)("h3",{id:"key-terms"},"Key Terms"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("h4",{parentName:"li",id:"tree"},"Tree"),(0,o.kt)("p",{parentName:"li"},"A data structure that consists of nodes, each with some value and pointers to child-nodes, which recursively form ",(0,o.kt)("strong",{parentName:"p"},"subtrees")," in the tree."),(0,o.kt)("p",{parentName:"li"},"The first node in a tree is referred to as the ",(0,o.kt)("strong",{parentName:"p"},"root")," of the tree, while the nodes at the bottom of a tree (the nodes with no child-nodes) are referred to as ",(0,o.kt)("strong",{parentName:"p"},"leaf nodes")," or simply ",(0,o.kt)("strong",{parentName:"p"},"leaves"),". The paths between the root of a tree and its leaves are called ",(0,o.kt)("strong",{parentName:"p"},"branches"),", and the ",(0,o.kt)("strong",{parentName:"p"},"height")," of a tree is the length of its longest branch. The ",(0,o.kt)("strong",{parentName:"p"},"depth")," of a tree node is its distance from its tree's root; this is also known as the node's ",(0,o.kt)("strong",{parentName:"p"},"level")," in the tree."),(0,o.kt)("p",{parentName:"li"},"A tree is effectively a ",(0,o.kt)("strong",{parentName:"p"},"graph")," that's ",(0,o.kt)("strong",{parentName:"p"},"connected"),", ",(0,o.kt)("strong",{parentName:"p"},"directed"),", and ",(0,o.kt)("strong",{parentName:"p"},"acyclic"),", that has an explicit root node, and whose nodes all have a single ",(0,o.kt)("strong",{parentName:"p"},"parent")," (except for the root node, which effectively has no parent). Note that in most implementations of trees, tree nodes don't have a pointer to their parent, but they can if desired."),(0,o.kt)("p",{parentName:"li"},"There are many types of trees and tree-like structures, including ",(0,o.kt)("strong",{parentName:"p"},"binary trees"),", ",(0,o.kt)("strong",{parentName:"p"},"heaps"),", and ",(0,o.kt)("strong",{parentName:"p"},"tries"),".")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("h4",{parentName:"li",id:"binary-tree"},"Binary Tree"),(0,o.kt)("p",{parentName:"li"},"A ",(0,o.kt)("strong",{parentName:"p"},"tree")," whose nodes have up to ",(0,o.kt)("strong",{parentName:"p"},"two")," child-nodes."),(0,o.kt)("p",{parentName:"li"},"The structure of a binary tree is such that many of its operations have a logarithmic time complexity, making the binary tree an incredibly attractive and commonly used data structure.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("h4",{parentName:"li",id:"k-ary-tree"},"K-ary Tree"),(0,o.kt)("p",{parentName:"li"},"A ",(0,o.kt)("strong",{parentName:"p"},"tree")," whose nodes have up to ",(0,o.kt)("strong",{parentName:"p"},"k")," child-nodes. A ",(0,o.kt)("strong",{parentName:"p"},"binary tree")," is a k-ary tree where ",(0,o.kt)("strong",{parentName:"p"},"k == 2"),".")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("h4",{parentName:"li",id:"perfect-binary-tree"},"Perfect Binary Tree"),(0,o.kt)("p",{parentName:"li"},"A ",(0,o.kt)("strong",{parentName:"p"},"binary tree")," whose interior nodes all have two child-nodes and whose ",(0,o.kt)("strong",{parentName:"p"},"leaf nodes")," all have the same ",(0,o.kt)("strong",{parentName:"p"},"depth"),". Example:"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"           1           \n        /     \\        \n     2           3     \n    / \\         / \\    \n  4     5     6     7  \n / \\   / \\   / \\   / \\ \n8   9 10 11 12 13 14 15\n\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("h4",{parentName:"li",id:"complete-binary-tree"},"Complete Binary Tree"),(0,o.kt)("p",{parentName:"li"},"A ",(0,o.kt)("strong",{parentName:"p"},"binary tree")," that's ",(0,o.kt)("em",{parentName:"p"},"almost")," ",(0,o.kt)("strong",{parentName:"p"},"perfect"),"; its interior nodes all have two child-nodes, but its ",(0,o.kt)("strong",{parentName:"p"},"leaf nodes")," don't necessarily all have the same ",(0,o.kt)("strong",{parentName:"p"},"depth"),". Furthermore, the nodes in the last ",(0,o.kt)("strong",{parentName:"p"},"level")," of a complete binary tree are as far left as possible. Example:"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"              1\n           /     \\\n          2       3\n        /   \\   /   \\\n       4     5 6     7\n     /   \\\n    8     9\n    \n")),(0,o.kt)("p",null,"Conversely, the following binary tree ",(0,o.kt)("em",{parentName:"p"},"isn't")," complete, because the nodes in its last level aren't as far left as possible:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"            1\n         /     \\\n        2       3\n      /   \\   /   \\\n     4     5 6     7\n           /   \\\n          8     9\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("h4",{parentName:"li",id:"balanced-binary-tree"},"Balanced Binary Tree"),"   A ",(0,o.kt)("strong",{parentName:"li"},"binary tree")," whose nodes all have left and right ",(0,o.kt)("strong",{parentName:"li"},"subtrees")," whose ",(0,o.kt)("strong",{parentName:"li"},"heights")," differ by no more than 1.","   A balanced binary tree is such that the logarithmic time complexity of its operations is maintained.","   For example, inserting a node at the bottom of the following ",(0,o.kt)("em",{parentName:"li"},"imbalanced")," binary tree's left subtree would cleary not be a logarithmic-time operation, since it would involve traversing through most of the tree's nodes:",(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre"},"               1\n            /     \\\n           2       3\n         /\n        4\n      /\n     8\n    /\n  10\n")))),(0,o.kt)("p",null,"The following is an example of a balanced binary tree:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"            1\n         /     \\\n        2       3\n      /   \\   /   \\\n     4     5 6     7\n   /   \\         /   \n  10    9       8\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("h4",{parentName:"li",id:"full-binary-tree"},"Full Binary Tree"),"   A ",(0,o.kt)("strong",{parentName:"li"},"binary tree")," whose nodes all have either two child-nodes or zero child-nodes. Example:",(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre"},"       1\n    /     \\\n   2       3\n         /   \\\n        6     7\n      /   \\\n     8     9\n")))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'\n## Code implementation \n\n```go\npackage main\n\nimport (\n    "fmt"\n    "io"\n    "os"\n)\n\ntype Node struct {\n    Left  *Node\n    Right *Node\n\n    Data int\n}\n\ntype Tree struct {\n    Root *Node\n}\n\nfunc (t *Tree) insert(data int) *Tree {\n    if t.Root == nil {\n        t.Root = &Node{Data: data, Left: nil, Right: nil}\n    } else {\n        t.Root.insert(data)\n    }\n    return t\n}\n\nfunc (n *Node) insert(data int) {\n    if n == nil {\n        return\n    } else if data <= n.Data {\n        if n.Left == nil {\n            n.Left = &Node{Data: data, Left: nil, Right: nil}\n        } else {\n            n.Left.insert(data)\n        }\n    } else {\n        if n.Right == nil {\n            n.Right = &Node{Data: data, Left: nil, Right: nil}\n        } else {\n            n.Right.insert(data)\n        }\n    }\n}\n\nfunc print(w io.Writer, node *Node, ns int, ch rune) {\n    if node == nil {\n        return\n    }\n\n    for i := 0; i < ns; i++ {\n        fmt.Fprint(w, " ")\n    }\n    fmt.Fprintf(w, "%c:%v\\n", ch, node.Data)\n    print(w, node.Left, ns+2, \'L\')\n    print(w, node.Right, ns+2, \'R\')\n}\n\nfunc main() {\n\n    tree := &Tree{}\n\n    tree.insert(100).\n        insert(-20).\n        insert(-50).\n        insert(-15).\n        insert(-60).\n        insert(50).\n        insert(60).\n        insert(55).\n        insert(85).\n        insert(15).\n        insert(5).\n        insert(-10)\n\n    print(os.Stdout, tree.Root, 0, \'M\')\n\n}\n\n//output\n\nM:100\n  L:-20\n    L:-50\n      L:-60\n    R:-15\n      R:50\n        L:15\n          L:5\n            L:-10\n        R:60\n          L:55\n          R:85\n\n\n')),(0,o.kt)("h2",{id:"references"},"References"),(0,o.kt)("iframe",{width:"950",height:"534",src:"https://www.youtube.com/embed/-oYitelECuQ",title:"Data Structures in Golang - Binary Search Tree",frameborder:"0",allow:"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture",allowfullscreen:!0}))}u.isMDXComponent=!0}}]);