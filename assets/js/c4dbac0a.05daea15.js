"use strict";(self.webpackChunkme=self.webpackChunkme||[]).push([[2126],{3905:function(e,t,r){r.d(t,{Zo:function(){return u},kt:function(){return d}});var a=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},i=Object.keys(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var s=a.createContext({}),p=function(e){var t=a.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},u=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,i=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),c=p(r),d=n,y=c["".concat(s,".").concat(d)]||c[d]||m[d]||i;return r?a.createElement(y,o(o({ref:t},u),{},{components:r})):a.createElement(y,o({ref:t},u))}));function d(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=r.length,o=new Array(i);o[0]=c;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:n,o[1]=l;for(var p=2;p<i;p++)o[p]=r[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,r)}c.displayName="MDXCreateElement"},3281:function(e,t,r){r.r(t),r.d(t,{assets:function(){return u},contentTitle:function(){return s},default:function(){return d},frontMatter:function(){return l},metadata:function(){return p},toc:function(){return m}});var a=r(7462),n=r(3366),i=(r(7294),r(3905)),o=["components"],l={title:"Array",sidebar_position:5},s="Array",p={unversionedId:"dsa/Array-JYTd_Npeg",id:"dsa/Array-JYTd_Npeg",title:"Array",description:"Key Terms",source:"@site/docs/dsa/20220612-Array-JYTd_Npeg.md",sourceDirName:"dsa",slug:"/dsa/Array-JYTd_Npeg",permalink:"/me/docs/dsa/Array-JYTd_Npeg",draft:!1,editUrl:"https://github.com/iamrahultanwar/me/tree/master/docs/dsa/20220612-Array-JYTd_Npeg.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{title:"Array",sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"Logarithm",permalink:"/me/docs/dsa/Logarithm-JA49mW3ZZ"},next:{title:"Linked Lists",permalink:"/me/docs/dsa/Linked Lists-IBDjsnBgx"}},u={},m=[{value:"Key Terms",id:"key-terms",level:2},{value:"Array",id:"array-1",level:3},{value:"Notes",id:"notes",level:2},{value:"Amortized Analysis",id:"amortized-analysis",level:3}],c={toc:m};function d(e){var t=e.components,r=(0,n.Z)(e,o);return(0,i.kt)("wrapper",(0,a.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"array"},"Array"),(0,i.kt)("h2",{id:"key-terms"},"Key Terms"),(0,i.kt)("h3",{id:"array-1"},"Array"),(0,i.kt)("p",null,"A linear collection of data values that are accessible at numbered indices, starting at index 0.\nThe following are an array's standard operations and their corresponding time complexities:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Accessing a value at a given index:")," O(1)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Updating a value at a given index:")," O(1)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Inserting a value at the beginning:")," O(n)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Inserting a value in the middle:")," O(n)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Inserting a value at the end:"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"amortized O(1) when dealing with a ",(0,i.kt)("strong",{parentName:"li"},"dynamic array")),(0,i.kt)("li",{parentName:"ul"},"O(n) when dealing with a ",(0,i.kt)("strong",{parentName:"li"},"static array")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Removing a value at the beginning:")," O(n)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Removing a value in the middle:")," O(n)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Removing a value at the end:")," O(1)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Copying the array:")," O(n)")),(0,i.kt)("p",null,"A static array is an implementation of an array that allocates a fixed amount of memory to be used for storing the array's values. Appending\nvalues to the array therefore involves copying the entire array and allocating new memory for it, accounting for the extra space needed for\nthe newly appended value. This is a linear-time operation."),(0,i.kt)("p",null,"A dynamic array is an implementation of an array that preemptively allocates double the amount of memory needed to store the array's\nvalues. Appending values to the array is a constant-time operation until the allocated memory is filled up, at which point the array is copied\nand double the memory is once again allocated for it. This implementation leads to an amortized constant-time insertion-at-end operation."),(0,i.kt)("p",null,"A lot of popular programming languages like JavaScript and Python implement arrays as dynamic arrays."),(0,i.kt)("h2",{id:"notes"},"Notes"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Arrays in golang")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-golang"},' var arr[5]string\n arr := [2]string{"r","a"}\n')),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Dynamic Arrays")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"  arr = [1,2,3,_,_,_] // stores data with double the required space\n\n  copy in dynamic array \n\n  1 + 2 + 4 + 8 + 16 + ... + N\n\n  O(1) + O(2) + O(4) + O(8) + ... + O(N)\n\n  N + N/2 + N/4 + N/8 + ... + 1 = O(2N) = O(N)\n")),(0,i.kt)("h3",{id:"amortized-analysis"},"Amortized Analysis"),(0,i.kt)("p",null,"Amortized analysis is a method for analyzing a given algorithm's complexity, or how much of a resource, especially time or memory, it takes to execute."))}d.isMDXComponent=!0}}]);