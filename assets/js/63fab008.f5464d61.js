"use strict";(self.webpackChunkme=self.webpackChunkme||[]).push([[4258],{3905:function(t,e,r){r.d(e,{Zo:function(){return c},kt:function(){return g}});var i=r(7294);function s(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function n(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);e&&(i=i.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,i)}return r}function l(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?n(Object(r),!0).forEach((function(e){s(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):n(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function a(t,e){if(null==t)return{};var r,i,s=function(t,e){if(null==t)return{};var r,i,s={},n=Object.keys(t);for(i=0;i<n.length;i++)r=n[i],e.indexOf(r)>=0||(s[r]=t[r]);return s}(t,e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);for(i=0;i<n.length;i++)r=n[i],e.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(t,r)&&(s[r]=t[r])}return s}var o=i.createContext({}),p=function(t){var e=i.useContext(o),r=e;return t&&(r="function"==typeof t?t(e):l(l({},e),t)),r},c=function(t){var e=p(t.components);return i.createElement(o.Provider,{value:e},t.children)},u={inlineCode:"code",wrapper:function(t){var e=t.children;return i.createElement(i.Fragment,{},e)}},f=i.forwardRef((function(t,e){var r=t.components,s=t.mdxType,n=t.originalType,o=t.parentName,c=a(t,["components","mdxType","originalType","parentName"]),f=p(r),g=s,m=f["".concat(o,".").concat(g)]||f[g]||u[g]||n;return r?i.createElement(m,l(l({ref:e},c),{},{components:r})):i.createElement(m,l({ref:e},c))}));function g(t,e){var r=arguments,s=e&&e.mdxType;if("string"==typeof t||s){var n=r.length,l=new Array(n);l[0]=f;var a={};for(var o in e)hasOwnProperty.call(e,o)&&(a[o]=e[o]);a.originalType=t,a.mdxType="string"==typeof t?t:s,l[1]=a;for(var p=2;p<n;p++)l[p]=r[p];return i.createElement.apply(null,l)}return i.createElement.apply(null,r)}f.displayName="MDXCreateElement"},8581:function(t,e,r){r.r(e),r.d(e,{assets:function(){return c},contentTitle:function(){return o},default:function(){return g},frontMatter:function(){return a},metadata:function(){return p},toc:function(){return u}});var i=r(7462),s=r(3366),n=(r(7294),r(3905)),l=["components"],a={},o="Sorting Algorithm Snippets",p={unversionedId:"algorithm/sorting algorithms/Sorting Algorithm Snippets-gano6XRNp",id:"algorithm/sorting algorithms/Sorting Algorithm Snippets-gano6XRNp",title:"Sorting Algorithm Snippets",description:"",source:"@site/docs/algorithm/sorting algorithms/20220701-Sorting Algorithm Snippets-gano6XRNp.md",sourceDirName:"algorithm/sorting algorithms",slug:"/algorithm/sorting algorithms/Sorting Algorithm Snippets-gano6XRNp",permalink:"/docs/algorithm/sorting algorithms/Sorting Algorithm Snippets-gano6XRNp",draft:!1,editUrl:"https://github.com/iamrahultanwar/me/tree/master/docs/algorithm/sorting algorithms/20220701-Sorting Algorithm Snippets-gano6XRNp.md",tags:[],version:"current",sidebarPosition:20220701,frontMatter:{},sidebar:"mainSidebar",previous:{title:"Snippets",permalink:"/docs/algorithm/python/Snippets-nzXMLR49S"},next:{title:"Questions",permalink:"/docs/questions/"}},c={},u=[],f={toc:u};function g(t){var e=t.components,r=(0,s.Z)(t,l);return(0,n.kt)("wrapper",(0,i.Z)({},f,r,{components:e,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"sorting-algorithm-snippets"},"Sorting Algorithm Snippets"),(0,n.kt)("h1",{id:"bubble-sort"},"bubble sort"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},"def bubble_sort(list2):\n    #swap_test = False\n    for i in range(0, len(list2) - 1):\n        # as suggested by kubrick, makes sense\n        swap_test = False\n        for j in range(0, len(list2) - i - 1):\n            if list2[j] > list2[j + 1]:\n                list2[j], list2[j + 1] = list2[j + 1], list2[j]  # swap\n            swap_test = True\n        if swap_test == False:\n            break\n")),(0,n.kt)("h1",{id:"selection-sort"},"selection sort"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},"def selection_sort(list2):\n    for i in range(0, len (list2)):\n        min = i\n        for j in range(i + 1, len(list2)):\n            if list2[j] < list2[min]:\n                min = j\n        list2[i], list2[min] = list2[min], list2[i]  # swap\n")),(0,n.kt)("h1",{id:"insertion-sort"},"insertion sort"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},"def insertion_sort(list2):\n    for i in range(1, len(list2)):\n        save = list2[i]\n        j = i\n        while j > 0 and list2[j - 1] > save:\n            list2[j] = list2[j - 1]\n            j -= 1\n        list2[j] = save\n")),(0,n.kt)("h1",{id:"quick-sort"},"quick sort"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},"def quick_sort(list2):\n    quick_sort_r(list2, 0, len(list2) - 1)\n")),(0,n.kt)("h1",{id:"quick_sort_r-recursive-used-by-quick_sort"},"quick_sort_r, recursive (used by quick_sort)"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},"def quick_sort_r(list2 , first, last):\n    if last > first:\n        pivot = partition(list2, first, last)\n        quick_sort_r(list2, first, pivot - 1)\n        quick_sort_r(list2, pivot + 1, last)\n")),(0,n.kt)("h1",{id:"partition-used-by-quick_sort_r"},"partition (used by quick_sort_r)"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},"def partition(list2, first, last):\n    sred = (first + last)/2\n    if list2[first] > list2 [sred]:\n        list2[first], list2[sred] = list2[sred], list2[first]  # swap\n    if list2[first] > list2 [last]:\n        list2[first], list2[last] = list2[last], list2[first]  # swap\n    if list2[sred] > list2[last]:\n        list2[sred], list2[last] = list2[last], list2[sred]    # swap\n    list2 [sred], list2 [first] = list2[first], list2[sred]    # swap\n    pivot = first\n    i = first + 1\n    j = last\n  \n    while True:\n        while i <= last and list2[i] <= list2[pivot]:\n            i += 1\n        while j >= first and list2[j] > list2[pivot]:\n            j -= 1\n        if i >= j:\n            break\n        else:\n            list2[i], list2[j] = list2[j], list2[i]  # swap\n    list2[j], list2[pivot] = list2[pivot], list2[j]  # swap\n    return j\n")),(0,n.kt)("h1",{id:"heap-sort"},"heap sort"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},"def heap_sort(list2):\n    first = 0\n    last = len(list2) - 1\n    create_heap(list2, first, last)\n    for i in range(last, first, -1):\n        list2[i], list2[first] = list2[first], list2[i]  # swap\n        establish_heap_property (list2, first, i - 1)\n")),(0,n.kt)("h1",{id:"create-heap-used-by-heap_sort"},"create heap (used by heap_sort)"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},"def create_heap(list2, first, last):\n    i = last/2\n    while i >= first:\n        establish_heap_property(list2, i, last)\n        i -= 1\n")),(0,n.kt)("h1",{id:"establish-heap-property-used-by-create_heap"},"establish heap property (used by create_heap)"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},"def establish_heap_property(list2, first, last):\n    while 2 * first + 1 <= last:\n        k = 2 * first + 1\n        if k < last and list2[k] < list2[k + 1]:\n            k += 1\n        if list2[first] >= list2[k]:\n            break\n        list2[first], list2[k] = list2[k], list2[first]  # swap\n        first = k\n")),(0,n.kt)("h1",{id:"merge-sort"},"merge sort"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},"def merge_sort(list2):\n    merge_sort_r(list2, 0, len(list2) -1)\n")),(0,n.kt)("h1",{id:"merge-sort-recursive-used-by-merge_sort"},"merge sort recursive (used by merge_sort)"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},"def merge_sort_r(list2, first, last):\n    if first < last:\n        sred = (first + last)/2\n        merge_sort_r(list2, first, sred)\n        merge_sort_r(list2, sred + 1, last)\n        merge(list2, first, last, sred)\n")),(0,n.kt)("h1",{id:"merge-used-by-merge_sort_r"},"merge (used by merge_sort_r)"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},"def merge(list2, first, last, sred):\n    helper_list = []\n    i = first\n    j = sred + 1\n    while i <= sred and j <= last:\n        if list2 [i] <= list2 [j]:\n            helper_list.append(list2[i])\n            i += 1\n        else:\n            helper_list.append(list2 [j])\n            j += 1\n    while i <= sred:\n        helper_list.append(list2[i])\n        i +=1\n    while j <= last:\n        helper_list.append(list2[j])\n        j += 1\n    for k in range(0, last - first + 1):\n        list2[first + k] = helper_list [k]\n")))}g.isMDXComponent=!0}}]);