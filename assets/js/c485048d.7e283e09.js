"use strict";(self.webpackChunkme=self.webpackChunkme||[]).push([[5412],{3905:function(e,n,t){t.d(n,{Zo:function(){return m},kt:function(){return c}});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=a.createContext({}),p=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},m=function(e){var n=p(e.components);return a.createElement(s.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,m=i(e,["components","mdxType","originalType","parentName"]),d=p(t),c=r,g=d["".concat(s,".").concat(c)]||d[c]||u[c]||o;return t?a.createElement(g,l(l({ref:n},m),{},{components:t})):a.createElement(g,l({ref:n},m))}));function c(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,l=new Array(o);l[0]=d;var i={};for(var s in n)hasOwnProperty.call(n,s)&&(i[s]=n[s]);i.originalType=e,i.mdxType="string"==typeof e?e:r,l[1]=i;for(var p=2;p<o;p++)l[p]=t[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},2571:function(e,n,t){t.r(n),t.d(n,{assets:function(){return m},contentTitle:function(){return s},default:function(){return c},frontMatter:function(){return i},metadata:function(){return p},toc:function(){return u}});var a=t(7462),r=t(3366),o=(t(7294),t(3905)),l=["components"],i={},s="Cheatsheet",p={unversionedId:"algorithm/python/Cheatsheet-eoHvkmdIK",id:"algorithm/python/Cheatsheet-eoHvkmdIK",title:"Cheatsheet",description:"Contents",source:"@site/docs/algorithm/python/20220624-Cheatsheet-eoHvkmdIK.md",sourceDirName:"algorithm/python",slug:"/algorithm/python/Cheatsheet-eoHvkmdIK",permalink:"/docs/algorithm/python/Cheatsheet-eoHvkmdIK",draft:!1,editUrl:"https://github.com/iamrahultanwar/me/tree/master/docs/algorithm/python/20220624-Cheatsheet-eoHvkmdIK.md",tags:[],version:"current",sidebarPosition:20220624,frontMatter:{},sidebar:"mainSidebar",previous:{title:"CheatSheet",permalink:"/docs/algorithm/javascript/CheatSheet-KZS7tH1Dv"},next:{title:"Snippets",permalink:"/docs/algorithm/python/Snippets-nzXMLR49S"}},m={},u=[{value:"Contents",id:"contents",level:2},{value:"Numbers",id:"numbers",level:2},{value:"Strings",id:"strings",level:2},{value:"Boolean",id:"boolean",level:2},{value:"Lists",id:"lists",level:2},{value:"Dictionaries",id:"dictionaries",level:2},{value:"Tuples",id:"tuples",level:2},{value:"Sets",id:"sets",level:2},{value:"None",id:"none",level:2},{value:"Comparison Operators",id:"comparison-operators",level:2},{value:"Logical Operators",id:"logical-operators",level:2},{value:"Loops",id:"loops",level:2},{value:"Range",id:"range",level:2},{value:"Enumerate",id:"enumerate",level:2},{value:"Counter",id:"counter",level:2},{value:"Named Tuple",id:"named-tuple",level:2},{value:"OrderedDict",id:"ordereddict",level:2},{value:"Functions",id:"functions",level:2},{value:"*args and **kwargs",id:"args-and-kwargs",level:4},{value:"* Inside Function Definition",id:"-inside-function-definition",level:4},{value:"Ordering of parameters:",id:"ordering-of-parameters",level:5},{value:"Other Uses of *",id:"other-uses-of-",level:4},{value:"Lambda",id:"lambda",level:2},{value:"Comprehensions",id:"comprehensions",level:2},{value:"Ternary Condition",id:"ternary-condition",level:2},{value:"Map Filter Reduce",id:"map-filter-reduce",level:2},{value:"Any All",id:"any-all",level:2},{value:"Closures",id:"closures",level:2},{value:"Scope",id:"scope",level:3},{value:"Modules",id:"modules",level:2},{value:"Iterators",id:"iterators",level:2},{value:"Generators",id:"generators",level:2},{value:"Decorators",id:"decorators",level:2},{value:"Debugger Example",id:"debugger-example",level:3},{value:"Class",id:"class",level:2},{value:"Inheritance",id:"inheritance",level:3},{value:"Multiple Inheritance",id:"multiple-inheritance",level:3},{value:"Exceptions",id:"exceptions",level:2},{value:"Raising Exception",id:"raising-exception",level:3},{value:"Finally",id:"finally",level:3},{value:"Command Line Arguments",id:"command-line-arguments",level:2},{value:"File IO",id:"file-io",level:2},{value:"Modes",id:"modes",level:3},{value:"File",id:"file",level:3},{value:"Read Text from File",id:"read-text-from-file",level:3},{value:"Write Text to File",id:"write-text-to-file",level:3},{value:"Append Text to File",id:"append-text-to-file",level:3},{value:"CSV",id:"csv",level:2},{value:"Read Rows from CSV File",id:"read-rows-from-csv-file",level:3},{value:"Write Rows to CSV File",id:"write-rows-to-csv-file",level:3},{value:"JSON",id:"json",level:2},{value:"Read Object from JSON File",id:"read-object-from-json-file",level:3},{value:"Write Object to JSON File",id:"write-object-to-json-file",level:3},{value:"Pickle",id:"pickle",level:2},{value:"Read Object from File",id:"read-object-from-file",level:3},{value:"Write Object to File",id:"write-object-to-file",level:3},{value:"Profile",id:"profile",level:2},{value:"Basic",id:"basic",level:3},{value:"Math",id:"math",level:3},{value:"Statistics",id:"statistics",level:3},{value:"Random",id:"random",level:3},{value:"Datetime",id:"datetime",level:2},{value:"Constructors",id:"constructors",level:3},{value:"Now",id:"now",level:3},{value:"Timezone",id:"timezone",level:3},{value:"Regex",id:"regex",level:2},{value:"Match Object",id:"match-object",level:3},{value:"Special Sequences",id:"special-sequences",level:3},{value:"Credits",id:"credits",level:2}],d={toc:u};function c(e){var n=e.components,t=(0,r.Z)(e,l);return(0,o.kt)("wrapper",(0,a.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"cheatsheet"},"Cheatsheet"),(0,o.kt)("h1",{id:"cheatsheet-1"},"Cheatsheet"),(0,o.kt)("h2",{id:"contents"},"Contents"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Python Types:")," ",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("a",{parentName:"strong",href:"#numbers"},(0,o.kt)("inlineCode",{parentName:"a"},"Numbers"))),",",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("a",{parentName:"strong",href:"#strings"},(0,o.kt)("inlineCode",{parentName:"a"},"Strings"))),",",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("a",{parentName:"strong",href:"#boolean"},(0,o.kt)("inlineCode",{parentName:"a"},"Boolean"))),",",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("a",{parentName:"strong",href:"#lists"},(0,o.kt)("inlineCode",{parentName:"a"},"Lists"))),",",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("a",{parentName:"strong",href:"#dictionaries"},(0,o.kt)("inlineCode",{parentName:"a"},"Dictionaries"))),",",(0,o.kt)("strong",{parentName:"p"}," ",(0,o.kt)("a",{parentName:"strong",href:"#tuples"},(0,o.kt)("inlineCode",{parentName:"a"},"Tuples"))),",",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("a",{parentName:"strong",href:"#sets"},(0,o.kt)("inlineCode",{parentName:"a"},"Sets"))),",",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("a",{parentName:"strong",href:"#none"},(0,o.kt)("inlineCode",{parentName:"a"},"None")))),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Python Basics:")," ",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("a",{parentName:"strong",href:"#comparison-operators"},(0,o.kt)("inlineCode",{parentName:"a"},"Comparison Operators"))),",",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("a",{parentName:"strong",href:"#logical-operators"},(0,o.kt)("inlineCode",{parentName:"a"},"Logical Operators"))),",",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("a",{parentName:"strong",href:"#loops"},(0,o.kt)("inlineCode",{parentName:"a"},"Loops"))),",",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("a",{parentName:"strong",href:"#range"},(0,o.kt)("inlineCode",{parentName:"a"},"Range"))),",",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("a",{parentName:"strong",href:"#enumerate"},(0,o.kt)("inlineCode",{parentName:"a"},"Enumerate"))),",",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("a",{parentName:"strong",href:"#counter"},(0,o.kt)("inlineCode",{parentName:"a"},"Counter"))),",",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("a",{parentName:"strong",href:"#named-tuple"},(0,o.kt)("inlineCode",{parentName:"a"},"Named Tuple"))),",",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("a",{parentName:"strong",href:"#ordereddict"},(0,o.kt)("inlineCode",{parentName:"a"},"OrderedDict")))),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Functions:")," ",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("a",{parentName:"strong",href:"#functions"},(0,o.kt)("inlineCode",{parentName:"a"},"Functions"))),",",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("a",{parentName:"strong",href:"#lambda"},(0,o.kt)("inlineCode",{parentName:"a"},"Lambda"))),",",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("a",{parentName:"strong",href:"#comprehensions"},(0,o.kt)("inlineCode",{parentName:"a"},"Comprehensions"))),",",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("a",{parentName:"strong",href:"#map-filter-reduce"},(0,o.kt)("inlineCode",{parentName:"a"},"Map,Filter,Reduce"))),",",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("a",{parentName:"strong",href:"#ternary-condition"},(0,o.kt)("inlineCode",{parentName:"a"},"Ternary"))),",",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("a",{parentName:"strong",href:"#any-all"},(0,o.kt)("inlineCode",{parentName:"a"},"Any,All"))),",",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("a",{parentName:"strong",href:"#closures"},(0,o.kt)("inlineCode",{parentName:"a"},"Closures"))),",",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("a",{parentName:"strong",href:"#scope"},(0,o.kt)("inlineCode",{parentName:"a"},"Scope")))),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Advanced Python:")," ",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("a",{parentName:"strong",href:"#modules"},(0,o.kt)("inlineCode",{parentName:"a"},"Modules"))),",",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("a",{parentName:"strong",href:"#iterators"},(0,o.kt)("inlineCode",{parentName:"a"},"Iterators"))),",",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("a",{parentName:"strong",href:"#generators"},(0,o.kt)("inlineCode",{parentName:"a"},"Generators"))),",",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("a",{parentName:"strong",href:"#decorators"},(0,o.kt)("inlineCode",{parentName:"a"},"Decorators"))),",",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("a",{parentName:"strong",href:"#class"},(0,o.kt)("inlineCode",{parentName:"a"},"Class"))),",",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("a",{parentName:"strong",href:"#exceptions"},(0,o.kt)("inlineCode",{parentName:"a"},"Exceptions"))),",",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("a",{parentName:"strong",href:"#command-line-arguments"},(0,o.kt)("inlineCode",{parentName:"a"},"Command Line Arguments"))),",",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("a",{parentName:"strong",href:"#file-io"},(0,o.kt)("inlineCode",{parentName:"a"},"File IO"))),",",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("a",{parentName:"strong",href:"#useful-libraries"},(0,o.kt)("inlineCode",{parentName:"a"},"Useful Libraries")))),(0,o.kt)("h2",{id:"numbers"},"Numbers"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"python's 2 main types for Numbers is int and float (or integers and floating point numbers)")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"type(1)   # int\ntype(-10) # int\ntype(0)   # int\ntype(0.0) # float\ntype(2.2) # float\ntype(4E2) # float - 4*10 to the power of 2\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"# Arithmetic\n10 + 3  # 13\n10 - 3  # 7\n10 * 3  # 30\n10 ** 3 # 1000\n10 / 3  # 3.3333333333333335\n10 // 3 # 3 --\x3e floor division - no decimals and returns an int\n10 % 3  # 1 --\x3e modulo operator - return the reminder. Good for deciding if number is even or odd\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"# Basic Functions\npow(5, 2)      # 25 --\x3e like doing 5**2\nabs(-50)       # 50\nround(5.46)    # 5\nround(5.468, 2)# 5.47 --\x3e round to nth digit\nbin(512)       # '0b1000000000' --\x3e  binary format\nhex(512)       # '0x200' --\x3e hexadecimal format\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'# Converting Strings to Numbers\nage = input("How old are you?")\nage = int(age)\npi = input("What is the value of pi?")\npi = float(pi)\n')),(0,o.kt)("h2",{id:"strings"},"Strings"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"strings in python as stored as sequences of letters in memory")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"type('Hellloooooo') # str\n\n'I\\'m thirsty'\n\"I'm thirsty\"\n\"\\n\" # new line\n\"\\t\" # adds a tab\n\n'Hey you!'[4] # y\nname = 'Andrei Neagoie'\nname[4]     # e\nname[:]     # Andrei Neagoie\nname[1:]    # ndrei Neagoie\nname[:1]    # A\nname[-1]    # e\nname[::1]   # Andrei Neagoie\nname[::-1]  # eiogaeN ierdnA\nname[0:10:2]# Ade e\n# : is called slicing and has the format [ start : end : step ]\n\n'Hi there ' + 'Timmy' # 'Hi there Timmy' --\x3e This is called string concatenation\n'*'*10 # **********\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"# Basic Functions\nlen('turtle') # 6\n\n# Basic Methods\n'  I am alone '.strip()               # 'I am alone' --\x3e Strips all whitespace characters from both ends.\n'On an island'.strip('d')             # 'On an islan' --\x3e # Strips all passed characters from both ends.\n'but life is good!'.split()           # ['but', 'life', 'is', 'good!']\n'Help me'.replace('me', 'you')        # 'Help you' --\x3e Replaces first with second param\n'Need to make fire'.startswith('Need')# True\n'and cook rice'.endswith('rice')      # True\n'bye bye'.index('e')                  # 2\n'still there?'.upper()                # STILL THERE?\n'HELLO?!'.lower()                     # hello?!\n'ok, I am done.'.capitalize()         # 'Ok, I am done.'\n'oh hi there'.find('i')               # 4 --\x3e returns the starting index position of the first occurrence\n'oh hi there'.count('e')              # 2\n\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"# String Formatting\nname1 = 'Andrei'\nname2 = 'Sunny'\nprint(f'Hello there {name1} and {name2}')       # Hello there Andrei and Sunny - Newer way to do things as of python 3.6\nprint('Hello there {}, {}'.format(name1, name2))# Hello there Andrei and Sunny\nprint('Hello there %s and %s' %(name1, name2))  # Hello there Andrei and Sunny --\x3e you can also use %d, %f, %r for integers, floats, string representations of objects respectively\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"# Palindrome check\nword = 'reviver'\np = bool(word.find(word[::-1]) + 1)\nprint(p) # True\n")),(0,o.kt)("h2",{id:"boolean"},"Boolean"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"True or False. Used in a lot of comparison and logical operations in Python")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"bool(True)\nbool(False)\n\n# all of the below evaluate to False. Everything else will evaluate to True in Python.\nprint(bool(None))\nprint(bool(False))\nprint(bool(0))\nprint(bool(0.0))\nprint(bool([]))\nprint(bool({}))\nprint(bool(()))\nprint(bool(''))\nprint(bool(range(0)))\nprint(bool(set()))\n\n# See Logical Operators and Comparison Operators section for more on booleans.\n")),(0,o.kt)("h2",{id:"lists"},"Lists"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Unlike strings, lists are mutable sequences in python")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"my_list = [1, 2, '3', True]# We assume this list won't mutate for each example below\nlen(my_list)               # 4\nmy_list.index('3')         # 2\nmy_list.count(2)           # 1 --\x3e count how many times 2 appears\n\nmy_list[3]                 # True\nmy_list[1:]                # [2, '3', True]\nmy_list[:1]                # [1]\nmy_list[-1]                # True\nmy_list[::1]               # [1, 2, '3', True]\nmy_list[::-1]              # [True, '3', 2, 1]\nmy_list[0:3:2]             # [1, '3']\n\n# : is called slicing and has the format [ start : end : step ]\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"# Add to List\nmy_list * 2                # [1, 2, '3', True, 1, 2, '3', True]\nmy_list + [100]            # [1, 2, '3', True, 100] --\x3e doesn't mutate original list, creates new one\nmy_list.append(100)        # None --\x3e Mutates original list to [1, 2, '3', True, 100]          # Or: <list> += [<el>]\nmy_list.extend([100, 200]) # None --\x3e Mutates original list to [1, 2, '3', True, 100, 200]\nmy_list.insert(2, '!!!')   # None --\x3e  [1, 2, '!!!', '3', True] - Inserts item at index and moves the rest to the right.\n\n' '.join(['Hello','There'])# 'Hello There' --\x3e Joins elements using string as separator.\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"# Copy a List\nbasket = ['apples', 'pears', 'oranges']\nnew_basket = basket.copy()\nnew_basket2 = basket[:]\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"# Remove from List\n[1,2,3].pop()    # 3 --\x3e mutates original list, default index in the pop method is -1 (the last item)\n[1,2,3].pop(1)   # 2 --\x3e mutates original list\n[1,2,3].remove(2)# None --\x3e [1,3] Removes first occurrence of item or raises ValueError.\n[1,2,3].clear()  # None --\x3e mutates original list and removes all items: []\ndel [1,2,3][0] #\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"# Ordering\n[1,2,5,3].sort()         # None --\x3e Mutates list to [1, 2, 3, 5]\n[1,2,5,3].sort(reverse=True) # None --\x3e Mutates list to [5, 3, 2, 1]\n[1,2,5,3].reverse()      # None --\x3e Mutates list to [3, 5, 2, 1]\nsorted([1,2,5,3])        # [1, 2, 3, 5] --\x3e new list created\nlist(reversed([1,2,5,3]))# [3, 5, 2, 1] --\x3e reversed() returns an iterator\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"# Useful operations\n1 in [1,2,5,3]  # True\nmin([1,2,3,4,5])# 1\nmax([1,2,3,4,5])# 5\nsum([1,2,3,4,5])# 15\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"# Get First and Last element of a list\nmList = [63, 21, 30, 14, 35, 26, 77, 18, 49, 10]\nfirst, *x, last = mList\nprint(first) #63\nprint(last) #10\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"# Matrix\nmatrix = [[1,2,3], [4,5,6], [7,8,9]]\nmatrix[2][0] # 7 --\x3e Grab first first of the third item in the matrix object\n\n# Looping through a matrix by rows:\nmx = [[1,2,3],[4,5,6]]\nfor row in range(len(mx)):\n    for col in range(len(mx[0])):\n        print(mx[row][col]) # 1 2 3 4 5 6\n\n# Transform into a list:\n[mx[row][col] for row in range(len(mx)) for col in range(len(mx[0]))] # [1,2,3,4,5,6]\n\n# Combine columns with zip and *:\n[x for x in zip(*mx)] # [(1, 3), (2, 4)]\n\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"# List Comprehensions\n# new_list[<action> for <item> in <iterator> if <some condition>]\na = [i for i in 'hello']                  # ['h', 'e', 'l', 'l', '0']\nb = [i*2 for i in [1,2,3]]                # [2, 4, 6]\nc = [i for i in range(0,10) if i % 2 == 0]# [0, 2, 4, 6, 8]\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"# Advanced Functions\nlist_of_chars = list('Helloooo')                                   # ['H', 'e', 'l', 'l', 'o', 'o', 'o', 'o']\nsum_of_elements = sum([1,2,3,4,5])                                 # 15\nelement_sum = [sum(pair) for pair in zip([1,2,3],[4,5,6])]         # [5, 7, 9]\nsorted_by_second = sorted(['hi','you','man'], key=lambda el: el[1])# ['man', 'hi', 'you']\nsorted_by_key = sorted([\n                       {'name': 'Bina', 'age': 30},\n                       {'name':'Andy', 'age': 18},\n                       {'name': 'Zoey', 'age': 55}],\n                       key=lambda el: (el['name']))# [{'name': 'Andy', 'age': 18}, {'name': 'Bina', 'age': 30}, {'name': 'Zoey', 'age': 55}]\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'# Read line of a file into a list\nwith open("myfile.txt") as f:\n  lines = [line.strip() for line in f]\n')),(0,o.kt)("h2",{id:"dictionaries"},"Dictionaries"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Also known as mappings or hash tables. They are key value pairs that are guaranteed to retain order of insertion starting from Python 3.7")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"my_dict = {'name': 'Andrei Neagoie', 'age': 30, 'magic_power': False}\nmy_dict['name']                      # Andrei Neagoie\nlen(my_dict)                         # 3\nlist(my_dict.keys())                 # ['name', 'age', 'magic_power']\nlist(my_dict.values())               # ['Andrei Neagoie', 30, False]\nlist(my_dict.items())                # [('name', 'Andrei Neagoie'), ('age', 30), ('magic_power', False)]\nmy_dict['favourite_snack'] = 'Grapes'# {'name': 'Andrei Neagoie', 'age': 30, 'magic_power': False, 'favourite_snack': 'Grapes'}\nmy_dict.get('age')                   # 30 --\x3e Returns None if key does not exist.\nmy_dict.get('ages', 0 )              # 0 --\x3e Returns default (2nd param) if key is not found\n\n#Remove key\ndel my_dict['name']\nmy_dict.pop('name', None)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"my_dict.update({'cool': True})                                         # {'name': 'Andrei Neagoie', 'age': 30, 'magic_power': False, 'favourite_snack': 'Grapes', 'cool': True}\n{**my_dict, **{'cool': True} }                                         # {'name': 'Andrei Neagoie', 'age': 30, 'magic_power': False, 'favourite_snack': 'Grapes', 'cool': True}\nnew_dict = dict([['name','Andrei'],['age',32],['magic_power',False]])  # Creates a dict from collection of key-value pairs.\nnew_dict = dict(zip(['name','age','magic_power'],['Andrei',32, False]))# Creates a dict from two collections.\nnew_dict = my_dict.pop('favourite_snack')                              # Removes item from dictionary.\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"# Dictionary Comprehension\n{key: value for key, value in new_dict.items() if key == 'age' or key == 'name'} # {'name': 'Andrei', 'age': 32} --\x3e Filter dict by keys\n")),(0,o.kt)("h2",{id:"tuples"},"Tuples"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Like lists, but they are used for immutable thing (that don't change)")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"my_tuple = ('apple','grapes','mango', 'grapes')\napple, grapes, mango, grapes = my_tuple# Tuple unpacking\nlen(my_tuple)                          # 4\nmy_tuple[2]                            # mango\nmy_tuple[-1]                           # 'grapes'\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"# Immutability\nmy_tuple[1] = 'donuts'  # TypeError\nmy_tuple.append('candy')# AttributeError\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"# Methods\nmy_tuple.index('grapes') # 1\nmy_tuple.count('grapes') # 2\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"# Zip\nlist(zip([1,2,3], [4,5,6])) # [(1, 4), (2, 5), (3, 6)]\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"# unzip\nz = [(1, 2), (3, 4), (5, 6), (7, 8)] # Some output of zip() function\nunzip = lambda z: list(zip(*z))\nunzip(z)\n")),(0,o.kt)("h2",{id:"sets"},"Sets"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Unorderd collection of unique elements.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"my_set = set()\nmy_set.add(1)  # {1}\nmy_set.add(100)# {1, 100}\nmy_set.add(100)# {1, 100} --\x3e no duplicates!\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"new_list = [1,2,3,3,3,4,4,5,6,1]\nset(new_list)           # {1, 2, 3, 4, 5, 6}\n\nmy_set.remove(100)      # {1} --\x3e Raises KeyError if element not found\nmy_set.discard(100)     # {1} --\x3e Doesn't raise an error if element not found\nmy_set.clear()          # {}\nnew_set = {1,2,3}.copy()# {1,2,3}\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"set1 = {1,2,3}\nset2 = {3,4,5}\nset3 = set1.union(set2)               # {1,2,3,4,5}\nset4 = set1.intersection(set2)        # {3}\nset5 = set1.difference(set2)          # {1, 2}\nset6 = set1.symmetric_difference(set2)# {1, 2, 4, 5}\nset1.issubset(set2)                   # False\nset1.issuperset(set2)                 # False\nset1.isdisjoint(set2)                 # False --\x3e return True if two sets have a null intersection.\n\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"# Frozenset\n# hashable --\x3e it can be used as a key in a dictionary or as an element in a set.\n<frozenset> = frozenset(<collection>)\n")),(0,o.kt)("h2",{id:"none"},"None"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"None is used for absence of a value and can be used to show nothing has been assigned to an object")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"type(None) # NoneType\na = None\n")),(0,o.kt)("h2",{id:"comparison-operators"},"Comparison Operators"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"==                   # equal values\n!=                   # not equal\n>                    # left operand is greater than right operand\n<                    # left operand is less than right operand\n>=                   # left operand is greater than or equal to right operand\n<=                   # left operand is less than or equal to right operand\n<element> is <element> # check if two operands refer to same object in memory\n")),(0,o.kt)("h2",{id:"logical-operators"},"Logical Operators"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"1 < 2 and 4 > 1 # True\n1 > 3 or 4 > 1  # True\n1 is not 4      # True\nnot True        # False\n1 not in [2,3,4]# True\n\nif <condition that evaluates to boolean>:\n  # perform action1\nelif <condition that evaluates to boolean>:\n  # perform action2\nelse:\n  # perform action3\n")),(0,o.kt)("h2",{id:"loops"},"Loops"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"my_list = [1,2,3]\nmy_tuple = (1,2,3)\nmy_list2 = [(1,2), (3,4), (5,6)]\nmy_dict = {'a': 1, 'b': 2. 'c': 3}\n\nfor num in my_list:\n    print(num) # 1, 2, 3\n\nfor num in my_tuple:\n    print(num) # 1, 2, 3\n\nfor num in my_list2:\n    print(num) # (1,2), (3,4), (5,6)\n\nfor num in '123':\n    print(num) # 1, 2, 3\n\nfor k,v in my_dict.items(): # Dictionary Unpacking\n    print(k) # 'a', 'b', 'c'\n    print(v) # 1, 2, 3\n\nwhile <condition that evaluates to boolean>:\n  # action\n  if <condition that evaluates to boolean>:\n    break # break out of while loop\n  if <condition that evaluates to boolean>:\n    continue # continue to the next line in the block\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"# waiting until user quits\nmsg = ''\nwhile msg != 'quit':\n    msg = input(\"What should I do?\")\n    print(msg)\n")),(0,o.kt)("h2",{id:"range"},"Range"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"range(10)          # range(0, 10) --\x3e 0 to 9\nrange(1,10)        # range(1, 10)\nlist(range(0,10,2))# [0, 2, 4, 6, 8]\n")),(0,o.kt)("h2",{id:"enumerate"},"Enumerate"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"for i, el in enumerate('helloo'):\n  print(f'{i}, {el}')\n# 0, h\n# 1, e\n# 2, l\n# 3, l\n# 4, o\n# 5, o\n")),(0,o.kt)("h2",{id:"counter"},"Counter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"from collections import Counter\ncolors = ['red', 'blue', 'yellow', 'blue', 'red', 'blue']\ncounter = Counter(colors)# Counter({'blue': 3, 'red': 2, 'yellow': 1})\ncounter.most_common()[0] # ('blue', 3)\n")),(0,o.kt)("h2",{id:"named-tuple"},"Named Tuple"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Tuple is an immutable and hashable list.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Named tuple is its subclass with named elements."))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"from collections import namedtuple\nPoint = namedtuple('Point', 'x y')\np = Point(1, y=2)# Point(x=1, y=2)\np[0]             # 1\np.x              # 1\ngetattr(p, 'y')  # 2\np._fields        # Or: Point._fields #('x', 'y')\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"from collections import namedtuple\nPerson = namedtuple('Person', 'name height')\nperson = Person('Jean-Luc', 187)\nf'{person.height}'           # '187'\n'{p.height}'.format(p=person)# '187'\n")),(0,o.kt)("h2",{id:"ordereddict"},"OrderedDict"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Maintains order of insertion"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"from collections import OrderedDict\n# Store each person's languages, keeping # track of who responded first.\nprogrammers = OrderedDict()\nprogrammers['Tim'] = ['python', 'javascript']\nprogrammers['Sarah'] = ['C++']\nprogrammers['Bia'] = ['Ruby', 'Python', 'Go']\n\nfor name, langs in programmers.items():\n    print(name + '--\x3e')\n    for lang in langs:\n      print('\\t' + lang)\n\n")),(0,o.kt)("h2",{id:"functions"},"Functions"),(0,o.kt)("h4",{id:"args-and-kwargs"},"*","args and ","*","*","kwargs"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Splat (","*",") expands a collection into positional arguments, while splatty-splat (","*","*",") expands a dictionary into keyword arguments.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"args   = (1, 2)\nkwargs = {'x': 3, 'y': 4, 'z': 5}\nsome_func(*args, **kwargs) # same as some_func(1, 2, x=3, y=4, z=5)\n")),(0,o.kt)("h4",{id:"-inside-function-definition"},"*"," Inside Function Definition"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Splat combines zero or more positional arguments into a tuple, while splatty-splat combines zero or more keyword arguments into a dictionary.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"def add(*a):\n    return sum(a)\n\nadd(1, 2, 3) # 6\n")),(0,o.kt)("h5",{id:"ordering-of-parameters"},"Ordering of parameters:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"def f(*args):                  # f(1, 2, 3)\ndef f(x, *args):               # f(1, 2, 3)\ndef f(*args, z):               # f(1, 2, z=3)\ndef f(x, *args, z):            # f(1, 2, z=3)\n\ndef f(**kwargs):               # f(x=1, y=2, z=3)\ndef f(x, **kwargs):            # f(x=1, y=2, z=3) | f(1, y=2, z=3)\n\ndef f(*args, **kwargs):        # f(x=1, y=2, z=3) | f(1, y=2, z=3) | f(1, 2, z=3) | f(1, 2, 3)\ndef f(x, *args, **kwargs):     # f(x=1, y=2, z=3) | f(1, y=2, z=3) | f(1, 2, z=3) | f(1, 2, 3)\ndef f(*args, y, **kwargs):     # f(x=1, y=2, z=3) | f(1, y=2, z=3)\ndef f(x, *args, z, **kwargs):  # f(x=1, y=2, z=3) | f(1, y=2, z=3) | f(1, 2, z=3)\n")),(0,o.kt)("h4",{id:"other-uses-of-"},"Other Uses of ","*"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"[*[1,2,3], *[4]]                # [1, 2, 3, 4]\n{*[1,2,3], *[4]}                # {1, 2, 3, 4}\n(*[1,2,3], *[4])                # (1, 2, 3, 4)\n{**{'a': 1, 'b': 2}, **{'c': 3}}# {'a': 1, 'b': 2, 'c': 3}\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"head, *body, tail = [1,2,3,4,5]\n")),(0,o.kt)("h2",{id:"lambda"},"Lambda"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"# lambda: <return_value>\n# lambda <argument1>, <argument2>: <return_value>\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"# Factorial\nfrom functools import reduce\n\nn = 3\nfactorial = reduce(lambda x, y: x*y, range(1, n+1))\nprint(factorial) #6\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"# Fibonacci\nfib = lambda n : n if n <= 1 else fib(n-1) + fib(n-2)\nresult = fib(10)\nprint(result) #55\n")),(0,o.kt)("h2",{id:"comprehensions"},"Comprehensions"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"<list> = [i+1 for i in range(10)]         # [1, 2, ..., 10]\n<set>  = {i for i in range(10) if i > 5}  # {6, 7, 8, 9}\n<iter> = (i+5 for i in range(10))         # (5, 6, ..., 14)\n<dict> = {i: i*2 for i in range(10)}      # {0: 0, 1: 2, ..., 9: 18}\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"output = [i+j for i in range(3) for j in range(3)] # [0, 1, 2, 1, 2, 3, 2, 3, 4]\n\n# Is the same as:\noutput = []\nfor i in range(3):\n  for j in range(3):\n    output.append(i+j)\n")),(0,o.kt)("h2",{id:"ternary-condition"},"Ternary Condition"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"# <expression_if_true> if <condition> else <expression_if_false>\n\n[a if a else 'zero' for a in [0, 1, 0, 3]] # ['zero', 1, 'zero', 3]\n")),(0,o.kt)("h2",{id:"map-filter-reduce"},"Map Filter Reduce"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"from functools import reduce\nlist(map(lambda x: x + 1, range(10)))            # [1, 2, 3, 4, 5, 6, 7, 8, 9,10]\nlist(filter(lambda x: x > 5, range(10)))         # (6, 7, 8, 9)\nreduce(lambda acc, x: acc + x, range(10))        # 45\n")),(0,o.kt)("h2",{id:"any-all"},"Any All"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"any([False, True, False])# True if at least one item in collection is truthy, False if empty.\nall([True,1,3,True])     # True if all items in collection are true\n")),(0,o.kt)("h2",{id:"closures"},"Closures"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"We have a closure in Python when:")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"A nested function references a value of its enclosing function and then")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"the enclosing function returns the nested function."))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"def get_multiplier(a):\n    def out(b):\n        return a * b\n    return out\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},">>> multiply_by_3 = get_multiplier(3)\n>>> multiply_by_3(10)\n30\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"If multiple nested functions within enclosing function reference the same value, that value gets shared.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"To dynamically access function's first free variable use ",(0,o.kt)("inlineCode",{parentName:"strong"},"'<function>.__closure__[0].cell_contents'"),"."))),(0,o.kt)("h3",{id:"scope"},"Scope"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"If variable is being assigned to anywhere in the scope, it is regarded as a local variable, unless it is declared as a 'global' or a 'nonlocal'.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"def get_counter():\n    i = 0\n    def out():\n        nonlocal i\n        i += 1\n        return i\n    return out\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},">>> counter = get_counter()\n>>> counter(), counter(), counter()\n(1, 2, 3)\n")),(0,o.kt)("h2",{id:"modules"},"Modules"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"if __name__ == '__main__': # Runs main() if file wasn't imported.\n    main()\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"import <module_name>\nfrom <module_name> import <function_name>\nimport <module_name> as m\nfrom <module_name> import <function_name> as m_function\nfrom <module_name> import *\n")),(0,o.kt)("h2",{id:"iterators"},"Iterators"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"In this cheatsheet ",(0,o.kt)("inlineCode",{parentName:"strong"},"'<collection>'")," can also mean an iterator.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"<iter> = iter(<collection>)\n<iter> = iter(<function>, to_exclusive)     # Sequence of return values until 'to_exclusive'.\n<el>   = next(<iter> [, default])           # Raises StopIteration or returns 'default' on end.\n")),(0,o.kt)("h2",{id:"generators"},"Generators"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Convenient way to implement the iterator protocol.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"def count(start, step):\n    while True:\n        yield start\n        start += step\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},">>> counter = count(10, 2)\n>>> next(counter), next(counter), next(counter)\n(10, 12, 14)\n")),(0,o.kt)("h2",{id:"decorators"},"Decorators"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"A decorator takes a function, adds some functionality and returns it.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"@decorator_name\ndef function_that_gets_passed_to_decorator():\n    ...\n")),(0,o.kt)("h3",{id:"debugger-example"},"Debugger Example"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Decorator that prints function's name every time it gets called.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"from functools import wraps\n\ndef debug(func):\n    @wraps(func)\n    def out(*args, **kwargs):\n        print(func.__name__)\n        return func(*args, **kwargs)\n    return out\n\n@debug\ndef add(x, y):\n    return x + y\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Wraps is a helper decorator that copies metadata of function add() to function out().")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Without it ",(0,o.kt)("inlineCode",{parentName:"strong"},"'add.__name__'")," would return ",(0,o.kt)("inlineCode",{parentName:"strong"},"'out'"),"."))),(0,o.kt)("h2",{id:"class"},"Class"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"User defined objects are created using the class keyword")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"class <name>:\n    age = 80 # Class Object Attribute\n    def __init__(self, a):\n        self.a = a # Object Attribute\n\n    @classmethod\n    def get_class_name(cls):\n        return cls.__name__\n")),(0,o.kt)("h3",{id:"inheritance"},"Inheritance"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"class Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age  = age\n\nclass Employee(Person):\n    def __init__(self, name, age, staff_num):\n        super().__init__(name, age)\n        self.staff_num = staff_num\n")),(0,o.kt)("h3",{id:"multiple-inheritance"},"Multiple Inheritance"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"class A: pass\nclass B: pass\nclass C(A, B): pass\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"MRO determines the order in which parent classes are traversed when searching for a method:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},">>> C.mro()\n[<class 'C'>, <class 'A'>, <class 'B'>, <class 'object'>]\n")),(0,o.kt)("h2",{id:"exceptions"},"Exceptions"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'try:\n  5/0\nexcept ZeroDivisionError:\n  print("No division by zero!")\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"while True:\n  try:\n    x = int(input('Enter your age: '))\n  except ValueError:\n    print('Oops!  That was no valid number.  Try again...')\n  else: # code that depends on the try block running successfully should be placed in the else block.\n    print('Carry on!')\n    break\n")),(0,o.kt)("h3",{id:"raising-exception"},"Raising Exception"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"raise ValueError('some error message')\n")),(0,o.kt)("h3",{id:"finally"},"Finally"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"try:\n  raise KeyboardInterrupt\nexcept:\n  print('oops')\nfinally:\n  print('All done!')\n\n")),(0,o.kt)("h2",{id:"command-line-arguments"},"Command Line Arguments"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"import sys\nscript_name = sys.argv[0]\narguments   = sys.argv[1:]\n")),(0,o.kt)("h2",{id:"file-io"},"File IO"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Opens a file and returns a corresponding file object.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"<file> = open('<path>', mode='r', encoding=None)\n")),(0,o.kt)("h3",{id:"modes"},"Modes"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"strong"},"'r'")," - Read (default).")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"strong"},"'w'")," - Write (truncate).")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"strong"},"'x'")," - Write or fail if the file already exists.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"strong"},"'a'")," - Append.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"strong"},"'w+'")," - Read and write (truncate).")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"strong"},"'r+'")," - Read and write from the start.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"strong"},"'a+'")," - Read and write from the end.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"strong"},"'t'")," - Text mode (default).")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"strong"},"'b'")," - Binary mode."))),(0,o.kt)("h3",{id:"file"},"File"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"<file>.seek(0)                      # Moves to the start of the file.\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"<str/bytes> = <file>.readline()     # Returns a line.\n<list>      = <file>.readlines()    # Returns a list of lines.\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"<file>.write(<str/bytes>)           # Writes a string or bytes object.\n<file>.writelines(<list>)           # Writes a list of strings or bytes objects.\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Methods do not add or strip trailing newlines."))),(0,o.kt)("h3",{id:"read-text-from-file"},"Read Text from File"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"def read_file(filename):\n    with open(filename, encoding='utf-8') as file:\n        return file.readlines() # or read()\n\nfor line in read_file(filename):\n  print(line)\n")),(0,o.kt)("h3",{id:"write-text-to-file"},"Write Text to File"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"def write_to_file(filename, text):\n    with open(filename, 'w', encoding='utf-8') as file:\n        file.write(text)\n")),(0,o.kt)("h3",{id:"append-text-to-file"},"Append Text to File"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"def append_to_file(filename, text):\n    with open(filename, 'a', encoding='utf-8') as file:\n        file.write(text)\n")),(0,o.kt)("h1",{id:"useful-libraries"},"Useful Libraries"),(0,o.kt)("h2",{id:"csv"},"CSV"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"import csv\n")),(0,o.kt)("h3",{id:"read-rows-from-csv-file"},"Read Rows from CSV File"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"def read_csv_file(filename):\n    with open(filename, encoding='utf-8') as file:\n        return csv.reader(file, delimiter=';')\n")),(0,o.kt)("h3",{id:"write-rows-to-csv-file"},"Write Rows to CSV File"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"def write_to_csv_file(filename, rows):\n    with open(filename, 'w', encoding='utf-8') as file:\n        writer = csv.writer(file, delimiter=';')\n        writer.writerows(rows)\n")),(0,o.kt)("h2",{id:"json"},"JSON"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"import json\n<str>    = json.dumps(<object>, ensure_ascii=True, indent=None)\n<object> = json.loads(<str>)\n")),(0,o.kt)("h3",{id:"read-object-from-json-file"},"Read Object from JSON File"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"def read_json_file(filename):\n    with open(filename, encoding='utf-8') as file:\n        return json.load(file)\n")),(0,o.kt)("h3",{id:"write-object-to-json-file"},"Write Object to JSON File"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"def write_to_json_file(filename, an_object):\n    with open(filename, 'w', encoding='utf-8') as file:\n        json.dump(an_object, file, ensure_ascii=False, indent=2)\n")),(0,o.kt)("h2",{id:"pickle"},"Pickle"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"import pickle\n<bytes>  = pickle.dumps(<object>)\n<object> = pickle.loads(<bytes>)\n")),(0,o.kt)("h3",{id:"read-object-from-file"},"Read Object from File"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"def read_pickle_file(filename):\n    with open(filename, 'rb') as file:\n        return pickle.load(file)\n")),(0,o.kt)("h3",{id:"write-object-to-file"},"Write Object to File"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"def write_to_pickle_file(filename, an_object):\n    with open(filename, 'wb') as file:\n        pickle.dump(an_object, file)\n")),(0,o.kt)("h2",{id:"profile"},"Profile"),(0,o.kt)("h3",{id:"basic"},"Basic"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"from time import time\nstart_time = time()  # Seconds since\n...\nduration = time() - start_time\n")),(0,o.kt)("h3",{id:"math"},"Math"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"from math import e, pi\nfrom math import cos, acos, sin, asin, tan, atan, degrees, radians\nfrom math import log, log10, log2\nfrom math import inf, nan, isinf, isnan\n")),(0,o.kt)("h3",{id:"statistics"},"Statistics"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"from statistics import mean, median, variance, pvariance, pstdev\n")),(0,o.kt)("h3",{id:"random"},"Random"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"from random import random, randint, choice, shuffle\nrandom() # random float between 0 and 1\nrandint(0, 100) # random integer between 0 and 100\nrandom_el = choice([1,2,3,4]) # select a random element from list\nshuffle([1,2,3,4]) # shuffles a list\n")),(0,o.kt)("h2",{id:"datetime"},"Datetime"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Module 'datetime' provides 'date' ",(0,o.kt)("inlineCode",{parentName:"strong"},"<D>"),", 'time' ",(0,o.kt)("inlineCode",{parentName:"strong"},"<T>"),", 'datetime' ",(0,o.kt)("inlineCode",{parentName:"strong"},"<DT>")," and 'timedelta' ",(0,o.kt)("inlineCode",{parentName:"strong"},"<TD>")," classes. All are immutable and hashable.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Time and datetime can be 'aware' ",(0,o.kt)("inlineCode",{parentName:"strong"},"<a>"),", meaning they have defined timezone, or 'naive' ",(0,o.kt)("inlineCode",{parentName:"strong"},"<n>"),", meaning they don't.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"If object is naive it is presumed to be in system's timezone."))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"from datetime import date, time, datetime, timedelta\nfrom dateutil.tz import UTC, tzlocal, gettz\n")),(0,o.kt)("h3",{id:"constructors"},"Constructors"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"<D>  = date(year, month, day)\n<T>  = time(hour=0, minute=0, second=0, microsecond=0, tzinfo=None, fold=0)\n<DT> = datetime(year, month, day, hour=0, minute=0, second=0, ...)\n<TD> = timedelta(days=0, seconds=0, microseconds=0, milliseconds=0,\n                 minutes=0, hours=0, weeks=0)\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Use ",(0,o.kt)("inlineCode",{parentName:"strong"},"'<D/DT>.weekday()'")," to get the day of the week (Mon == 0).")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"strong"},"'fold=1'")," means second pass in case of time jumping back for one hour."))),(0,o.kt)("h3",{id:"now"},"Now"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"<D/DTn>  = D/DT.today()                     # Current local date or naive datetime.\n<DTn>    = DT.utcnow()                      # Naive datetime from current UTC time.\n<DTa>    = DT.now(<tz>)                     # Aware datetime from current tz time.\n")),(0,o.kt)("h3",{id:"timezone"},"Timezone"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"<tz>     = UTC                              # UTC timezone.\n<tz>     = tzlocal()                        # Local timezone.\n<tz>     = gettz('<Cont.>/<City>')          # Timezone from 'Continent/City_Name' str.\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"<DTa>    = <DT>.astimezone(<tz>)            # Datetime, converted to passed timezone.\n<Ta/DTa> = <T/DT>.replace(tzinfo=<tz>)      # Unconverted object with new timezone.\n")),(0,o.kt)("h2",{id:"regex"},"Regex"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"import re\n<str>   = re.sub(<regex>, new, text, count=0)  # Substitutes all occurrences.\n<list>  = re.findall(<regex>, text)            # Returns all occurrences.\n<list>  = re.split(<regex>, text, maxsplit=0)  # Use brackets in regex to keep the matches.\n<Match> = re.search(<regex>, text)             # Searches for first occurrence of pattern.\n<Match> = re.match(<regex>, text)              # Searches only at the beginning of the text.\n")),(0,o.kt)("h3",{id:"match-object"},"Match Object"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"<str>   = <Match>.group()   # Whole match.\n<str>   = <Match>.group(1)  # Part in first bracket.\n<tuple> = <Match>.groups()  # All bracketed parts.\n<int>   = <Match>.start()   # Start index of a match.\n<int>   = <Match>.end()     # Exclusive end index of a match.\n")),(0,o.kt)("h3",{id:"special-sequences"},"Special Sequences"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Expressions below hold true for strings that contain only ASCII characters. Use capital letters for negation.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"'\\d' == '[0-9]'          # Digit\n'\\s' == '[ \\t\\n\\r\\f\\v]'  # Whitespace\n'\\w' == '[a-zA-Z0-9_]'   # Alphanumeric\n")),(0,o.kt)("h2",{id:"credits"},"Credits"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Inspired by: ",(0,o.kt)("a",{parentName:"li",href:"https://github.com/gto76/python-cheatsheet"},"https://github.com/gto76/python-cheatsheet")),(0,o.kt)("li",{parentName:"ul"},"github : ",(0,o.kt)("a",{parentName:"li",href:"https://github.com/aneagoie/ztm-python-cheat-sheet"},"https://github.com/aneagoie/ztm-python-cheat-sheet"))))}c.isMDXComponent=!0}}]);